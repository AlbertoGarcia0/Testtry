{"version":3,"sources":["components/Header.js","components/Dashboard/QuestionCountPie.js","components/Dashboard.js","components/Footer.js","components/App.js","serviceWorker.js","index.js","assets/img/logo.jpg"],"names":["Header","id","Navbar","collapseOnSelect","expand","bg","variant","fixed","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","getRandomColor","color","i","Math","floor","random","QuestionPie","props","data","labels","asignaturas","datasets","backgroundColor","hoverBackgroundColor","this","React","Component","Dashboard","Container","Row","Col","EduardezInfoPopover","Popover","Title","as","Content","target","EduardezLogo","OverlayTrigger","trigger","placement","overlay","rootClose","Image","src","logo","rounded","Footer","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"mQA6BeA,MArBf,WACE,OACE,yBAAKC,GAAG,UACN,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,OAClE,kBAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,WAAnB,WACA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,0BAC7B,kBAACT,EAAA,EAAOU,SAAR,CAAiBX,GAAG,yBAClB,kBAACY,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,cAAf,aACA,kBAACI,EAAA,EAAIE,KAAL,CAAUN,KAAK,cAAf,aACA,kBAACI,EAAA,EAAIE,KAAL,CAAUN,KAAK,gBAAf,eACA,kBAACI,EAAA,EAAIE,KAAL,CAAUN,KAAK,SAAf,a,iFCfZ,SAASO,IAGP,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,E,IA0CMK,E,YAhBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,KAxBL,CACCC,OAuBsB,EAAKF,MAAMG,YAtBjCC,SAAU,CAAC,CACVH,KAAM,CAAC,IAAK,GAAI,KAChBI,gBAAiB,CACjBZ,IACAA,IACAA,KAEAa,qBAAsB,CACtBb,IACAA,IACAA,QASe,E,sEAOjB,OACE,6BACE,kBAAC,IAAD,CAAKQ,KAAMM,KAAKN,Y,GAVEO,IAAMC,WCJjBC,MAhBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWjC,GAAG,aACZ,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,SAAM,kBAAC,EAAD,CAAaV,YATP,CAAC,aAAc,cAAe,WAS1C,KACA,kBAACU,EAAA,EAAD,gBAEF,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,kB,kDChBFC,EACJ,kBAACC,EAAA,EAAD,CAASrC,GAAG,gBACV,kBAACqC,EAAA,EAAQC,MAAT,CAAeC,GAAG,MAAlB,YACA,kBAACF,EAAA,EAAQG,QAAT,KACE,yOAMA,yCAEE,uBAAGhC,KAAK,kCAAkCiC,OAAO,UAAjD,IAA2D,8CAM7DC,EACF,kBAACC,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,QACVC,QAASV,EACTW,WAAW,GACT,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAMrC,UAAU,WAAWsC,SAAO,KAkBvCC,MAdf,WACE,OACE,4BAAQC,MAAM,SACZ,kBAACpD,EAAA,EAAD,CAAQG,GAAG,OAAOC,QAAQ,OAAOC,MAAM,iBACrC,kBAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,aAAnB,IAAiCkC,MCpB1BY,MAVf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.fe09d972.chunk.js","sourcesContent":["import React from \"react\"\nimport '../assets/css/Header.css';\n\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\n\n\nfunction Header(){\n  return(\n    <div id=\"inicio\">\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\">\n        <Navbar.Brand href=\"#inicio\">TestTry</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#dashboard\">Dashboard</Nav.Link>\n            <Nav.Link href=\"#preguntas\">Preguntas</Nav.Link>\n            <Nav.Link href=\"#asignaturas\">Asignaturas</Nav.Link>\n            <Nav.Link href=\"#test\">Test</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n    </div>\n  )\n}\n\n\nexport default Header\n","import React from \"react\"\n\nimport { Pie } from 'react-chartjs-2';\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction newDataset(asignaturas){\n  return(\n    {\n    \tlabels: asignaturas,\n    \tdatasets: [{\n    \t\tdata: [300, 50, 100],\n    \t\tbackgroundColor: [\n    \t\tgetRandomColor(),\n    \t\tgetRandomColor(),\n    \t\tgetRandomColor()\n    \t\t],\n    \t\thoverBackgroundColor: [\n    \t\tgetRandomColor(),\n    \t\tgetRandomColor(),\n    \t\tgetRandomColor()\n    \t\t]\n    \t}]\n    }\n  )\n}\n\n\nclass QuestionPie extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.data = newDataset(this.props.asignaturas)\n  }\n\n  render() {\n    return (\n      <div>\n        <Pie data={this.data} />\n      </div>\n    );\n  }\n}\n\n\nexport default QuestionPie\n","import React from \"react\"\nimport '../assets/css/Dashboard.css';\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport QuestionPie from './Dashboard/QuestionCountPie.js'\n\nfunction readQuestionInfo(){\n  var asignaturas = ['Operativos', 'Concurrente', 'Otras']\n\n  return asignaturas\n}\n\nfunction Dashboard(){\n  return(\n    <Container id='Dashboard'>\n      <Row>\n        <Col> <QuestionPie asignaturas={readQuestionInfo()} /> </Col>\n        <Col>2 of 2</Col>\n      </Row>\n      <Row>\n        <Col>1 of 3</Col>\n        <Col>2 of 3</Col>\n        <Col>3 of 3</Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Dashboard\n","import React from \"react\"\nimport logo from '../assets/img/logo.jpg';\nimport '../assets/css/Footer.css';\n\nimport Image from 'react-bootstrap/Image'\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Popover from 'react-bootstrap/Popover'\nimport Navbar from 'react-bootstrap/Navbar'\n\nconst EduardezInfoPopover = (\n  <Popover id=\"popover-info\">\n    <Popover.Title as=\"h3\">Eduardez</Popover.Title>\n    <Popover.Content>\n      <p>\n        A ver, la pagina esta la uso para tener ejemplos de librerias\n        que me molan. Este overlay por ejemplo esta sacado de la libreria\n        de bootstrap, luego el menu de otra.\n        Ire poniendo los nombres de cada una.\n      </p>\n      <p>\n        Enlace a mi\n        <a href=\"https://www.github.com/eduardez\" target=\"_blank\"> <strong>GitHub</strong></a>\n      </p>\n    </Popover.Content>\n  </Popover>\n);\n\nconst EduardezLogo = (\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"right\"\n      overlay={EduardezInfoPopover}\n      rootClose={true}>\n        <Image src={logo} className=\"big-logo\" rounded />\n    </OverlayTrigger>\n)\n\nfunction Footer(){\n  return(\n    <footer class=\"about\">\n      <Navbar bg=\"dark\" variant=\"dark\" fixed=\"sticki-bottom\">\n        <Navbar.Brand href=\"#Eduardez\"> {EduardezLogo}</Navbar.Brand>\n      </Navbar>\n    </footer>\n\n\n\n      )\n}\n\n\nexport default Footer\n","import React from 'react';\n\nimport Accordion from 'react-bootstrap/Accordion'\nimport {ToastProvider} from 'react-toast-notifications';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Header from './Header'\nimport Dashboard from './Dashboard'\nimport Footer from './Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Dashboard />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.c23ddc5d.jpg\";"],"sourceRoot":""}